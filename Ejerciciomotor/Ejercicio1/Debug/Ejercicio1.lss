
Ejercicio1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000031e  000003b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800202  00800202  000003b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e99  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d3f  00000000  00000000  000023cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d60  00000000  00000000  0000310c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  00003e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073a  00000000  00000000  00004144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001432  00000000  00000000  0000487e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005cb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8f c0       	rjmp	.+286    	; 0x124 <__vector_1>
   6:	00 00       	nop
   8:	a9 c0       	rjmp	.+338    	; 0x15c <__vector_2>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	de c0       	rjmp	.+444    	; 0x212 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e1       	ldi	r30, 0x1E	; 30
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 30       	cpi	r26, 0x07	; 7
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b6 d0       	rcall	.+364    	; 0x28c <main>
 120:	fc c0       	rjmp	.+504    	; 0x31a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_1>:
	while(is_high(ADCSRA,ADSC))										// Espera a que finalice la conversión. Finaliza la
	{};																// conversión cuando el bit ADSC retorna a 0.
}

void confcomunicacion()
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	8f e3       	ldi	r24, 0x3F	; 63
 134:	9c e9       	ldi	r25, 0x9C	; 156
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <__vector_1+0x12>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <__vector_1+0x18>
 13c:	00 00       	nop
 13e:	48 99       	sbic	0x09, 0	; 9
 140:	06 c0       	rjmp	.+12     	; 0x14e <__vector_1+0x2a>
 142:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <motor>
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	89 27       	eor	r24, r25
 14a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <motor>
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_2>:
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	8f e3       	ldi	r24, 0x3F	; 63
 16c:	9c e9       	ldi	r25, 0x9C	; 156
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <__vector_2+0x12>
 172:	00 c0       	rjmp	.+0      	; 0x174 <__vector_2+0x18>
 174:	00 00       	nop
 176:	49 99       	sbic	0x09, 1	; 9
 178:	08 c0       	rjmp	.+16     	; 0x18a <__vector_2+0x2e>
 17a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <direccion>
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	89 27       	eor	r24, r25
 182:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <direccion>
 186:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <flagp2>
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <confpuertos>:
 198:	11 b8       	out	0x01, r1	; 1
 19a:	12 b8       	out	0x02, r1	; 2
 19c:	1a b8       	out	0x0a, r1	; 10
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	8b b9       	out	0x0b, r24	; 11
 1a2:	8f e0       	ldi	r24, 0x0F	; 15
 1a4:	84 b9       	out	0x04, r24	; 4
 1a6:	15 b8       	out	0x05, r1	; 5
 1a8:	8f e3       	ldi	r24, 0x3F	; 63
 1aa:	87 b9       	out	0x07, r24	; 7
 1ac:	18 b8       	out	0x08, r1	; 8
 1ae:	10 ba       	out	0x10, r1	; 16
 1b0:	08 95       	ret

000001b2 <confinterrupciones>:
 1b2:	8a e0       	ldi	r24, 0x0A	; 10
 1b4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	8d bb       	out	0x1d, r24	; 29
 1bc:	1c ba       	out	0x1c, r1	; 28
 1be:	08 95       	ret

000001c0 <conftimer>:
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	84 bd       	out	0x24, r24	; 36
 1c4:	95 e0       	ldi	r25, 0x05	; 5
 1c6:	95 bd       	out	0x25, r25	; 37
 1c8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
 1cc:	8b e9       	ldi	r24, 0x9B	; 155
 1ce:	87 bd       	out	0x27, r24	; 39
 1d0:	08 95       	ret

000001d2 <confCONVAD>:
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7c007e>
 1d8:	80 e4       	ldi	r24, 0x40	; 64
 1da:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
 1de:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 1e2:	87 e8       	ldi	r24, 0x87	; 135
 1e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 1e8:	08 95       	ret

000001ea <convertirAD>:
 1ea:	ec e7       	ldi	r30, 0x7C	; 124
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	80 7e       	andi	r24, 0xE0	; 224
 1f2:	80 83       	st	Z, r24
 1f4:	eb e7       	ldi	r30, 0x7B	; 123
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	87 7f       	andi	r24, 0xF7	; 247
 1fc:	80 83       	st	Z, r24
 1fe:	ea e7       	ldi	r30, 0x7A	; 122
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 64       	ori	r24, 0x40	; 64
 206:	80 83       	st	Z, r24
 208:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 20c:	86 fd       	sbrc	r24, 6
 20e:	fc cf       	rjmp	.-8      	; 0x208 <convertirAD+0x1e>
 210:	08 95       	ret

00000212 <__vector_21>:
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	0b b6       	in	r0, 0x3b	; 59
 21e:	0f 92       	push	r0
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	5f 93       	push	r21
 228:	6f 93       	push	r22
 22a:	7f 93       	push	r23
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
 238:	d8 df       	rcall	.-80     	; 0x1ea <convertirAD>
 23a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 23e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 242:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 246:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0b be       	out	0x3b, r0	; 59
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <delay_ms>:
	return;	
}

void delay_ms(int t)
{
	while(t--)
 270:	07 c0       	rjmp	.+14     	; 0x280 <delay_ms+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	8f e9       	ldi	r24, 0x9F	; 159
 274:	9f e0       	ldi	r25, 0x0F	; 15
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <delay_ms+0x6>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <delay_ms+0xc>
 27c:	00 00       	nop
 27e:	c9 01       	movw	r24, r18
 280:	9c 01       	movw	r18, r24
 282:	21 50       	subi	r18, 0x01	; 1
 284:	31 09       	sbc	r19, r1
 286:	89 2b       	or	r24, r25
 288:	a1 f7       	brne	.-24     	; 0x272 <delay_ms+0x2>
	_delay_ms(1);
}
 28a:	08 95       	ret

0000028c <main>:
	lecturavel=ADC;
}

int main(void)
{	
	confpuertos();
 28c:	85 df       	rcall	.-246    	; 0x198 <confpuertos>
	confinterrupciones();
 28e:	91 df       	rcall	.-222    	; 0x1b2 <confinterrupciones>
	conftimer();
 290:	97 df       	rcall	.-210    	; 0x1c0 <conftimer>
 292:	9f df       	rcall	.-194    	; 0x1d2 <confCONVAD>
	confCONVAD();
 294:	78 94       	sei
 296:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <motor>
//########### bucle ######

    while (1) 
    {
		//calcularvelocidad();
		if (motor)
 29a:	88 23       	and	r24, r24
 29c:	e1 f3       	breq	.-8      	; 0x296 <main+0xa>
 29e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <direccion>
		{
			//sentido antihorario
			if (direccion)
 2a2:	88 23       	and	r24, r24
 2a4:	e9 f0       	breq	.+58     	; 0x2e0 <main+0x54>
 2a6:	89 e0       	ldi	r24, 0x09	; 9
 2a8:	82 b9       	out	0x02, r24	; 2
			{
				PORTA=(1<<PA3)|(0<<PA2)|(0<<PA1)|(1<<PA0);
 2aa:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				delay_ms(velocidad);
 2ae:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 2b2:	de df       	rcall	.-68     	; 0x270 <delay_ms>
 2b4:	83 e0       	ldi	r24, 0x03	; 3
 2b6:	82 b9       	out	0x02, r24	; 2
				PORTA=(0<<PA3)|(0<<PA2)|(1<<PA1)|(1<<PA0);
 2b8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				delay_ms(velocidad);
 2bc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 2c0:	d7 df       	rcall	.-82     	; 0x270 <delay_ms>
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	82 b9       	out	0x02, r24	; 2
				PORTA=(0<<PA3)|(1<<PA2)|(1<<PA1)|(0<<PA0);
 2c6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				delay_ms(velocidad);
 2ca:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 2ce:	d0 df       	rcall	.-96     	; 0x270 <delay_ms>
 2d0:	8c e0       	ldi	r24, 0x0C	; 12
				PORTA=(1<<PA3)|(1<<PA2)|(0<<PA1)|(0<<PA0);
 2d2:	82 b9       	out	0x02, r24	; 2
 2d4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				delay_ms(velocidad);
 2d8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 2dc:	c9 df       	rcall	.-110    	; 0x270 <delay_ms>
 2de:	db cf       	rjmp	.-74     	; 0x296 <main+0xa>
 2e0:	89 e0       	ldi	r24, 0x09	; 9
				
			}
			else     //sentido horario
			{
				PORTA=(1<<PA3)|(0<<PA2)|(0<<PA1)|(1<<PA0);
 2e2:	82 b9       	out	0x02, r24	; 2
 2e4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				delay_ms(velocidad);
 2e8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 2ec:	c1 df       	rcall	.-126    	; 0x270 <delay_ms>
 2ee:	8c e0       	ldi	r24, 0x0C	; 12
				PORTA=(1<<PA3)|(1<<PA2)|(0<<PA1)|(0<<PA0);
 2f0:	82 b9       	out	0x02, r24	; 2
 2f2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				delay_ms(velocidad);
 2f6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 2fa:	ba df       	rcall	.-140    	; 0x270 <delay_ms>
 2fc:	86 e0       	ldi	r24, 0x06	; 6
				PORTA=(0<<PA3)|(1<<PA2)|(1<<PA1)|(0<<PA0);
 2fe:	82 b9       	out	0x02, r24	; 2
 300:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				delay_ms(velocidad);
 304:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 308:	b3 df       	rcall	.-154    	; 0x270 <delay_ms>
 30a:	83 e0       	ldi	r24, 0x03	; 3
				PORTA=(0<<PA3)|(0<<PA2)|(1<<PA1)|(1<<PA0);
 30c:	82 b9       	out	0x02, r24	; 2
 30e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				delay_ms(velocidad);				
 312:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 316:	ac df       	rcall	.-168    	; 0x270 <delay_ms>
 318:	be cf       	rjmp	.-132    	; 0x296 <main+0xa>

0000031a <_exit>:
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
